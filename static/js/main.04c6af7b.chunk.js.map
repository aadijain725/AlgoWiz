{"version":3,"sources":["components/viz/CustomGraph.js","components/NavBar.js","components/testJson/HomePageParser.js","components/homePageComps/HomePageTab.js","components/homePageComps/HomePageTopics.js","components/homePageComps/AlgoWiz Logo.png","components/homePageComps/HomePageIntroduction.js","components/homePageComps/IntroductionText.js","components/helpers/APIHelper.js","components/homePageComps/HomePage.js","components/quizComps/Question.js","components/quizComps/Progress.js","components/quizComps/Result.js","components/QuizPage.js","components/lessonComps/LessonCol.js","components/lessonComps/LessonRow.js","components/viz/VizSelectionRect.js","components/viz/VizCodeLine.js","components/viz/VizSelectionSortCode.js","components/viz/VizSelectionSort.js","components/viz/Algorithms/DijkstraAlgorithms.jsx","components/viz/VizDijkstraCodeLine.js","components/viz/VizDijsktraCode.js","components/viz/VizDijkstra.js","components/viz/VizBinarySearchCode.js","components/viz/VizBinarySearch.js","components/viz/VizRoot.js","components/lessonComps/LessonPage.js","components/Gutter.js","App.js","reportWebVitals.js","index.js"],"names":["Nodestyle","background","color","border","width","height","borderRadius","EdgeStyle","stroke","strokeWidth","EdgeLabelStyle","EdgeLabelBgStyle","fill","fillOpacity","is_animated_edge","arr","id","type","data","label","style","position","x","y","source","target","arrowHeadType","labelBgPadding","labelBgBorderRadius","labelBgStyle","labelStyle","animated","NavBar","Navbar","className","Nav","Item","to","React","Component","HomePageParser","topic","index","this","i","length","all_information","info2","topic_details","push","topicNames","HomePageTab","parsedData","props","allCards","getAllCards","getInfo","Container","fluid","map","counter","idx","cardsArray","getCard","description","class","fontSize","padding","cardData","Card","Row","Col","Body","Title","title","Img","variant","src","imageURL","alt","Text","styleDescription","lessonID","Button","quizID","HomePageTopics","Tabs","defaultActiveKey","getMenuForTopics","topics","menu","nameOfTopic","Tab","eventKey","HomePageIntroduction","logo","sm","styleintro","APIHelper","path","method","url","process","fetch","credentials","headers","then","response","ok","json","Promise","reject","result","error","HomePage","state","homeData","setState","getTopicNames","catch","err","console","log","xs","Question","selected","classList","options","option","ListGroup","action","setClasses","onClick","onSelect","toggleClass","value","Subtitle","qnum","submit","getOptions","Progress","curr","total","ProgressBar","now","Result","href","getUserFeedback","correct_ans","ans","feedbacks","option_index","feedback","Alert","QuizPage","handleSelect","submitted","showSubmit","numCorrect","handleSubmit","getAnswer","handleContinue","q","match","params","window","info","lessonId","getCategory","getQuestion","getFeedback","size","getLessonID","withRouter","LessonCol","cont","content","Image","text","LessonRow","cols","k","VizSelectionRect","textAlign","isIndex","motion","div","layoutId","isMin","layout","v","backgroundColor","c","VizCodeLine","isSelected","children","VizSelectionSortCode","line","step","VizSelectionSort","reset","cancelTimer","current","shuffle","j","min","play","intervalID","setInterval","timer","pause","advanceAlgo","first","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","clearInterval","st","AnimateSharedLayout","elem","DijkstraAnimations","vertices","edges","start","end","d","Map","keys","set","Number","POSITIVE_INFINITY","getInitialInfo","distance","nodeLabel","m","get","String","fromCharCode","charCodeAt","parseInt","getInititalDistance","explored_nodes","Set","add","queue","sort","a","b","parent","nodes_exploration_order","main_exploration","u","shift","edges_u","neigbor_update","e","cost_e","weight","has","node_weight_update","from","weightChangeNode","weightChangeValue","edgeID","edgeIndex","new_node_label","getUpdatedLabelWithWeight","edgeFromParent","node","new_queue","getInitialDistance","new_label_with_weight","VizDijkstraCodeLine","VizDisjktraCode","VizDijsktra","startingStepNumber","visualizationSpeed","initialTimeCounter","initialNumberNodes","numberNodes","graph","CustomGraph","slice","speed","play_timer_counter","lastExecutedStep","codeStep","startNode","endNode","getVertices","getEdges","animations_info","resetPressed","pausePressed","listOfTimeouts","simulatestep","timeoutID","setTimeout","module","intervals","clearTimeout","default","time_counter","copyGraph","item","nodeIndex","weightChangedTo","edgeitem","edgestyle","nodeitem","nodestyle","nodedata","node_explored","neighbors_update","node_index","parent_node_info","getEdgeFromParentAnimation","animateOneExploredNodes","neighbor_node","neighbor_weight","getNeigborAnimation","removeNeighborAnimation","getNodeExplorationAndWeightUpdateAnimation","getInitialDistanceAnimation","nodeID","NodeObject","fromNode","Edges","elements","Infinity","isVisited","previousVisitedNode","pathTillNow","isStart","isEnd","VizBinarySearchCode","mid","FILTERED_COLOR","BASE_COLOR","VizBinarySearch","colors","copyColors","barData","initialState","labels","datasets","borderWidth","colorsArray","changeColors","points","indices","markEnd","bind","targets","newStart","newEnd","animateColors","markFiltered","interval","xAxes","gridLines","display","yAxes","legend","userInput","VizRoot","engineRef","createRef","engine","graph_dijkstra_lesson","ref","sort_selection_lesson","search_binary_lesson","LessonPage","lessonData","rows","row","Gutter","App","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04c6af7b.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nlet Nodestyle = {\n  background: \"gray\",\n  color: \"#333\",\n  border: \"1px solid #222138\",\n  width: 80,\n  height: 80,\n  borderRadius: 40\n};\n\nlet EdgeStyle = {\n  stroke: '#7FDBFF', strokeWidth: \"2\",\n}\n\nlet EdgeLabelStyle = {\n  'fontSize': \"20px\"\n}\n\nlet EdgeLabelBgStyle = {\n  fill: '#FFCC00', color: '#fff', fillOpacity: 1\n}\n\nlet is_animated_edge = false\n\nlet arr = [\n  {\n    id: \"1\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> S </h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 10, y: 0 },\n  },\n  {\n    id: \"2\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> A</h3>\n        </>\n      ),\n    },\n    position: { x: 30, y: 180 },\n    style: Nodestyle,\n  },\n\n  {\n    id: \"3\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> B</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 300, y: 0 },\n  },\n\n  {\n    id: \"4\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> C</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 40, y: 400 },\n  },\n\n  {\n    id: \"5\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> D</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 290, y: 240 },\n  },\n\n  {\n    id: \"6\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> E</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 500, y: 100 },\n  },\n\n  {\n    id: \"7\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> F</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 400, y: 300 },\n  },\n\n  {\n    id: \"8\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> G</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 300, y: 500 },\n  },\n\n  {\n    id: \"9\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> H</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 600, y: 400 },\n  },\n\n  {\n    id: \"10\",\n    type: \"input\",\n    data: {\n      label: (\n        <>\n          <h3> I</h3>\n        </>\n      ),\n    },\n    style: Nodestyle,\n    position: { x: 700, y: 10 },\n  },\n\n  {\n    id: \"e1-2\",\n    source: \"1\",\n    target: \"2\",\n    label: \"2\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e1-3\",\n    source: \"1\",\n    target: \"3\",\n    label: \"12\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n\n  {\n    id: \"e2-4\",\n    source: \"2\",\n    target: \"4\",\n    label: \"5\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n  {\n    id: \"e2-6\",\n    source: \"2\",\n    target: \"6\",\n    label: \"1\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n  {\n    id: \"e3-5\",\n    source: \"3\",\n    target: \"5\",\n    label: \"1\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e3-6\",\n    source: \"3\",\n    target: \"6\",\n    label: \"4\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n\n  {\n    id: \"e5-8\",\n    source: \"5\",\n    target: \"8\",\n    label: \"3\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e4-8\",\n    source: \"4\",\n    target: \"8\",\n    label: \"4\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n\n  {\n    id: \"e8-9\",\n    source: \"8\",\n    target: \"9\",\n    label: \"5\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e4-7\",\n    source: \"4\",\n    target: \"7\",\n    label: \"1\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e6-9\",\n    source: \"6\",\n    target: \"9\",\n    label: \"2\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n  {\n    id: \"e9-10\",\n    source: \"9\",\n    target: \"10\",\n    label: \"6\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n  {\n    id: \"e7-10\",\n    source: \"7\",\n    target: \"10\",\n    label: \"2\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n  {\n    id: \"e10-3\",\n    source: \"10\",\n    target: \"3\",\n    label: \"2\", // weight\n    type: 'straight',\n    arrowHeadType: \"arrowclosed\",\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 4,\n    labelBgStyle: EdgeLabelBgStyle,\n    labelStyle: EdgeLabelStyle,\n    style: EdgeStyle,\n    animated: is_animated_edge\n  },\n\n];\n\nexport default arr","import './css/NavBar.css';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Nav, Navbar} from 'react-bootstrap';\n\nexport class NavBar extends React.Component {\n    render() {\n        // Render a nav component with link to home page for now\n        return(  \n            <Navbar id='nav' className='px-5'>\n                <Nav.Item><Link to='/' id=\"navLogo\">\n                AlgoWiz\n                </Link></Nav.Item>\n            </Navbar>\n        );\n    }\n}\n\nexport default NavBar;","\nexport default class HomePageParser {\n  topic = \"\";\n  index = 0;\n  constructor(data, topic) {\n    this.topic = topic\n    this.data = data\n    if (topic !=null) {\n      for (let i = 0; i < this.data.length; i++) {\n        //console.log(data[i][\"topicName\"])\n        if (this.data[i][\"topicName\"] === this.topic) {\n          this.index = i;\n          //console.log(\"index set\" + this.index)\n        }\n      }\n    }\n  }\n\n\n\n  getInfo() {\n    var all_information = []\n    for (let i = 0; i < this.data[this.index][\"data\"].length; i++) {\n      var info2 = this.data[this.index][\"data\"][i]\n      var topic_details = {\n        \"title\": info2[\"algorithmName\"],\n        \"description\": info2[\"homePageDescription\"],\n        \"imageURL\": info2[\"imageURL\"],\n        \"quizID\": info2[\"quizId\"],\n        \"lessonID\": info2[\"lessonId\"]\n      }\n      all_information.push(topic_details)\n    }\n    return all_information\n\n  }\n\n  getTopicNames() {\n    let topicNames = []\n    for (let i = 0; i < this.data.length; i++) {\n      topicNames.push(this.data[i][\"topicName\"])\n\n    }\n    return topicNames\n  }\n}","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Row, Button, Col, Card, Container, } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nimport HomePageParser from \"../testJson/HomePageParser.js\";\n\nexport class HomePageTab extends React.Component {\n\n\nrender() {\n  \n  var parsedData = new HomePageParser(this.props.data, this.props.topic);\n\n  const allCards = this.getAllCards(parsedData.getInfo());\n\n  return (\n    <Container fluid>\n      {/* <ul class=\"list-group\"> */}\n      {allCards.map((counter, idx) => (\n        <div key={idx}>{counter} </div>\n      ))}\n      {/*</Container></ul>*/}\n    </Container>\n  );\n}\n\ngetAllCards(arr) {\n  let cardsArray = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    cardsArray.push(\n      this.getCard(arr[i])\n    );\n  }\n  return cardsArray;\n}\n\nstyleDescription(description) {\n  // TODO: should try to avoid inline styles style the class instead\n  return (\n    <p\n      class=\"text-info\"\n      style={{ color: \"green\", fontSize: \"2.0rem\", padding: \"0.5rem\" }}\n    >\n      {\" \"}\n      {description}\n    </p>\n  );\n}\n\ngetCard(cardData) {\n  return (<Card\n    style={{\n      /*width: \"75rem\",\n      height: \"22rem\",*/\n      border: \"9px solid #1C6EA4\",\n      borderRadius: \"4px\",\n    }}\n    className=\"card\"\n  >\n    <Container fluid>\n      <Row>\n        <Col>\n          <Card.Body>\n            <Card.Title>{cardData.title}</Card.Title>\n            <Card.Img\n              variant=\"top\"\n              src={cardData.imageURL}\n              className=\"img-fluid\"\n              alt=\"Responsive image\"\n              style={{ width: \"80%\", height: \"70%\" }}\n            />\n          </Card.Body>\n        </Col>\n        <Col>\n          <Card.Body>\n            <Card.Text>{this.styleDescription(cardData.description)}</Card.Text>\n          </Card.Body>\n          <Card.Body>\n            <Link to={`lesson/${cardData.lessonID}`}>\n              <Button\n                variant=\"primary\"\n                className=\"btn btn-danger btn-sm m-5 stretched\"\n              >\n                <h4>Lesson</h4>\n              </Button>\n            </Link>\n            <Link to={`quiz/${cardData.quizID}`}>\n              <Button\n                variant=\"primary\"\n                className=\"btn btn-primary btn-sm m-5 stretched\"\n              >\n                <h4>Go to Quiz</h4>\n              </Button>\n            </Link>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n  );\n}\n}\nexport default HomePageTab;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Tabs,\n  Tab,\n  Row,\n  Col,\n  Container\n} from \"react-bootstrap\";\n\nimport HomePageTab from \"./HomePageTab\";\n\nexport class HomePageTopics extends React.Component {\n  render() {\n    /* TODO: 1. These should not be hardcoded, they should be built from the built \n     * from the fetched JSON data\n     * 2. avoid inline styles\n     */\n\n\n  //   <Tab eventKey=\"Search\" title=\"Search\" key = \"a\" >\n  //   <HomePageTab topic=\"Search\" />\n  // </Tab>\n\n  // <Tab eventKey=\"Graph\" title=\"Graph\" key = \"b\">\n  //   <HomePageTab topic=\"Graph\" /> \n  // </Tab>\n\n  // <Tab eventKey=\"Sorting\" title=\"Sorting\" key = \"c\">\n  //   <HomePageTab topic=\"Sorting\" />\n  // </Tab>\n \n    return (\n      \n      <div>\n        <Container fluid>\n          <Row>\n            <Col>\n              <Tabs\n                defaultActiveKey=\"Search\"\n                id=\"uncontrolled-tab-example\"\n                className=\"nav nav pills\"\n                style={{ color: \"red\", fontSize: \"150%\", padding :\"0.5em\" }}\n              >\n              {this.getMenuForTopics(this.props.data, this.props.topics)}\n              </Tabs>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n  \n  // return the menu for topics\n  getMenuForTopics(data, topics) {\n    let menu =[]\n    \n    for(let i =0; i < topics.length; i++) {\n      let nameOfTopic =   topics[i]\n      menu.push(\n        <Tab eventKey= {nameOfTopic} title= {nameOfTopic} key = {i+\"\"} >\n            <HomePageTab topic= {nameOfTopic} data = {data}/>\n        </Tab>\n      )\n    }\n    return menu\n  }\n}\n\nexport default HomePageTopics;\n","export default __webpack_public_path__ + \"static/media/AlgoWiz Logo.556a20a2.png\";","import React from \"react\";\nimport {\n  Row,\n  Col,\n  Container,\n} from \"react-bootstrap\";\nimport logo from \"./AlgoWiz Logo.png\";\n\nimport text from \"./IntroductionText.js\"\n\n\nexport class HomePageIntroduction extends React.Component {\n\n  styleintro(description) {\n    return (\n      <p id=\"introFont\" class=\"text-right\" style={{ \"font-size\": \"1.7vw\" }}>\n        {\" \"}\n        {description}\n      </p>\n    );\n  }\n\n  render() {\n      return (\n        <Container padding=\"left-align\">\n          <Row>\n            <h1 style={{ padding: \"centre-align\" }}>Welcome to AlgoWiz</h1>\n          </Row>\n          <Row>\n            <Col>\n              {\" \"}\n              <img\n                src={logo}\n                className=\"img-fluid\"\n                alt=\"intro logo\"\n                width=\"90%\"\n              ></img>{\" \"}\n            </Col>\n            <Col sm={7}>\n              {\" \"}\n              {this.styleintro(text)}\n            </Col>\n          </Row>\n        </Container>\n      );\n  }\n}\n\nexport default HomePageIntroduction;\n","const text= \"Algowiz is a highly interactive web-based application aimed at spreading the love and knowledge \"\n + \"we have for computer science. Initially, it will act as primarily an academic aid to students \"\n + \"and teachers alike. It will cover a wide array of topics ranging from sorting and searching algorithms to exploring graphs. \"\n + \"The experience will include \"\n + \"a separate section for each of the various topics. Each of these sections will have a \"  \n + \"study guide, a quiz, and a visualizer to help visualize the concepts.\";\n\nexport default text;","/**\n * Makes an Async fetch request to the API, must provide a path for the fetch\n * ie: Do not supply path = 'http://localhost:8080/algowiz/quiz/quizID'\n * instead use : path = 'quiz/quizID' \n * Expects to receive and return json data, may misbehave if other data returned\n * use promise syntax in conjunction with this method. Use catch to handle errors\n * Example usage: \n * APIHelper('quiz/quizID')\n * .then(result => {\n * \t\t// code for result\n * })\n * .catch(err => {\n * \t\t// code for error handling\n * })\n * @param {string} path, path to fetch from API\n * @param {string} method, optional, defaults to GET, (POST... etc)\n */\nfunction APIHelper(path, method = 'GET') {\n\t// check .env for which host to use (local vs production)\n\t// TODO: Sanitize path input?\n\tconst url = `${process.env.REACT_APP_API_URL}/${path}`;\n\t// return a promise\n\treturn fetch(url, {\n\t\tcredentials:'include',\n\t\tmethod,\n\t\theaders : { \n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Accept': 'application/json'\n\t\t}\n\t})\n\t.then(response => {\n\t\t// only pass along data if the fetch was successful\n\t\tif (response.ok) {\n\t\t\treturn response.json();\n\t\t} else {\n\t\t\t// return response as error\n\t\t\treturn Promise.reject(response);\n\t\t}\n\t})\n\t// return either the result or an error\n\t.then(result => {\n\t\t// pass along the json result\n\t\treturn result;\n\t}, (error) => {\n\t\t// Pass along the error\n\t\treturn Promise.reject(error);\n\t});\n}\n\nexport default APIHelper;\n","import React from 'react';\nimport HomePageTopics from './HomePageTopics';\nimport { HomePageIntroduction } from './HomePageIntroduction';\nimport { Container, Row, Col } from 'react-bootstrap';\n\n// Import the API helper class\nimport APIHelper from '../helpers/APIHelper';\n\n// Import the HomePageParser\nimport HomePageParser from \"../testJson/HomePageParser.js\";\n\n/**\n * Homepage builds from fetched data\n */\n\n\nexport class HomePage extends React.Component {\n    // Older style React constructor\n    constructor(props) {\n        super(props);\n        this.state = {\n            homeData: null,\n            topics: null\n        }\n    }\n\n    /**\n     * React Lifecycle method, only fetch once when the component loads. \n     * Saves data into state\n     */\n    componentDidMount() {\n        APIHelper('home')\n        .then(homeData => {\n            // if fetch successful update the state\n            this.setState({ homeData: homeData })\n        }).then(() => {\n            // Use the parser to organize the data\n            var parsedData = new HomePageParser(this.state.homeData, null); \n            this.setState({\n                topics: parsedData.getTopicNames()\n            })\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    render() {\n        // If no data yet render a loading message\n        // TODO: make a nice loading component\n        if (this.state.homeData == null || this.state.topics == null) {\n            return (<p>Loading...</p>)\n        } else {\n            return (\n                <Container fluid>\n                    <Row>\n                        <Col xs='auto'>\n                            <HomePageIntroduction />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs='auto'>\n                            <HomePageTopics data={this.state.homeData} topics={this.state.topics} />\n                        </Col>\n                    </Row>                \n                </Container>\n            );\n        }\n    }\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { Card, ListGroup, Container } from \"react-bootstrap\";\n\nexport class Question extends React.Component {\n  // Initializing state\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n\n  // Method to set class for highlighted button based on selected option  \n  toggleClass(i) {\n    this.setState({ selected: i });\n  }\n\n  // Method to show highlighted button based on selected option  \n  setClasses(i) {\n    let classList = \"\";\n    this.state.selected && this.state.selected === i + 1? classList += \"active \" : classList =\"\";\n    return classList;\n  }\n\n  // Funtion to get the different questions in the card\n  getOptions() {\n    let options = []; // List of all options in a given question \n    // Generating ESX tags for each option for the given question\n    for (let i = 0; i < this.props.options.length; i++) { \n      let option = (<ListGroup.Item\n        action\n        className = {this.setClasses(i) } // Set class based on state\n        onClick={() => {\n          this.props.onSelect(this.props.options[i], i);\n          this.toggleClass(i + 1);\n        }}\n      >\n        {this.props.options[i]}\n      </ListGroup.Item>);\n      options.push(option)\n    }\n    return options;\n  }\n\n  \n  // Renders the ESX for the Question card that is displayed to the user\n  render() {\n    return (\n      <Container>\n          <Card id = \"question-card\" className=\"quiz-question-card\">\n            <Card.Body>\n              <Card.Title> {this.props.value} </Card.Title>\n              <Card.Subtitle className=\"mb-2 text-muted\"> </Card.Subtitle>\n              <Card.Text>Question #{this.props.qnum + 1} </Card.Text>\n              <ListGroup \n                className = {!this.props.submit ? \"Disabled\":\"\"}\n                variant=\"flush\"\n              >\n                {this.getOptions()}\n              </ListGroup>\n            </Card.Body>\n          </Card>\n      </Container>\n    );\n  }\n}\n\nexport default Question;\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\n// Progress Bar component for the quiz to keep track of number of qs answered\nexport class Progress extends React.Component {\n    \n    // Renders ESX for rogress bar with the specified heading props.type and shows fraction\n    // with props.curr/props.total\n    render() {\n        return (\n            <Container id = \"progress-bar\">\n                <Row>\n                    <h3> {this.props.type} {this.props.curr}/{this.props.total} </h3> \n                </Row>\n                <Row>\n                    <ProgressBar animated variant=\"info\"  now={(this.props.curr/this.props.total)*100} />\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default Progress;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Row, Button,Card, Container } from \"react-bootstrap\";\nimport Progress from \"./Progress\"\nexport class Result extends React.Component {\n  \n// Renders the ESX for the final results  card, reached by the user after they complete \n// the quiz. Has a score, a progress bar and a simple picture/\nrender() {\n    return (\n    <Container id = \"results-page\">\n    <Row>\n      <Card style={{ width: \"40rem\" }}>\n        <Card.Img variant=\"top\" src=\"https://bsmedia.business-standard.com/_media/bs/img/article/2018-06/14/full/1528966655-8748.jpg\" />\n        <Card.Body>    \n          <Card.Title>Here are your resuts for the quiz</Card.Title>\n          \n          <Progress type =\"Your Score :\" curr ={this.props.curr} total ={this.props.total}></Progress>\n          <Link to='/'>\n            <Button className=\"btn btn-primary btn-m m-5\">Go Back to Home</Button>\n          </Link>\n          <Link to={`/lesson/${this.props.lessonID}`}>\n                  <Button\n                    href=\"/lesson\"\n                    className=\"btn btn-danger btn-m m-5\"\n                  >\n                    Go to corresponding Lesson Page\n                  </Button>\n          </Link>\n        </Card.Body>\n      </Card>\n      </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Result;\n","import React from 'react';\nimport Question from '../components/quizComps/Question'\nimport Progress from '../components/quizComps/Progress'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {withRouter} from 'react-router-dom';\nimport APIHelper from './helpers/APIHelper'\nimport {Container, Row, Col, Alert, Button} from 'react-bootstrap'\nimport Result from './quizComps/Result';\n\n// Functional component for generating ESX correct user feedback depending on the \n// User's answer and the correct answer \nexport function getUserFeedback(correct_ans, ans, feedbacks, option_index) {\n    let variant = \"\";\n    let feedback = \"\";\n    if (!ans) { // No answer is selected by user\n        feedback = \"Please select an answer before submitting\";\n        variant = \"warning\";\n    } else if (correct_ans === ans){ // User selected the correct answer\n        feedback = feedbacks[option_index];\n        variant = \"success\";\n    } else { // User selected the incorrect answer\n        feedback = feedbacks[option_index];\n        variant = \"danger\";\n    }\n\n    return <Alert \n            id = \"feedback\" \n            className = \"mt-5\"\n            variant = {variant}> \n            {feedback}\n        </Alert>\n}\n\n\nexport class QuizPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            qnum : 0,\n            ans: null,\n            submitted: false,\n            showSubmit: true,\n            numCorrect: 0,\n            data: null \n        };\n    }\n\n\n    componentDidMount() {\n        APIHelper(`quiz/${this.props.match.params.quizID}`)\n        .then(homeData => {\n            window.info = homeData[\"questionsList\"];\n            window.lessonId = homeData[\"lessonId\"];\n            window.title = homeData[\"title\"];\n            this.setState({\n                data: homeData \n            });\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    // Function that handles user selecting buttons \n    handleSelect = (ans, idx) => {\n        this.setState({\n            qnum: this.state.qnum, \n            ans: ans,\n            submitted: false,\n            showSubmit: true,\n            numCorrect: this.state.numCorrect,\n            idx: idx\n        })\n    }\n\n    // Function that handles user submissions\n    handleSubmit = () => {\n        let ans = this.state.ans;\n        let numCorrect = this.state.numCorrect;\n        if (ans === this.getAnswer(this.state.qnum) ) { // User's Answer is correct \n            numCorrect += 1;\n        } \n        this.setState({\n            qnum: this.state.qnum, \n            ans: ans,\n            submitted: true,\n            showSubmit: false,\n            idx: this.state.idx,\n            numCorrect: numCorrect\n        })\n    }\n\n    // Function that handles continue button functionality\n    handleContinue =  () => {\n        let ans = this.state.ans;\n        let q = this.state.qnum; \n        if (ans) { // if an answer is selected, show next question\n            q += 1;\n        }\n        this.setState({\n            qnum: q, \n            ans: null,\n            submitted: false,\n            showSubmit: true,\n            idx: this.idx,\n            numCorrect: this.state.numCorrect\n        });\n    }\n\n    // Renders\n    render() {\n        if (window.info && window.info.length > this.state.qnum) { // Quiz still ongoing and questions are left \n        // Rendering corrresponding ESX for quiz\n        return(\n            <Container className = \"quiz-page\">\n                {/* Top row -- topic + progress bar */}\n                <Row>\n                    <Col sm= {6}> <h2>Quiz Page: {this.getCategory()}</h2> </Col>\n                    <Col sm = {6}> <Progress id = \"quiz-progress-bar\" type = \"Questions Answered\" curr = {this.state.qnum} total = {window.info.length}></Progress> </Col>\n                </Row>\n                <Row>\n                    <Col sm = {3}></Col>\n                    <Col sm = {6}>\n                        {!this.state.submitted &&\n                        <Question \n                    value = {this.getQuestion(this.state.qnum)} \n                    qnum = {this.state.qnum}\n                    onSelect = {this.handleSelect}\n                    options = {this.getOptions(this.state.qnum)}\n                    ></Question>}\n                     </Col>\n                </Row>\n                {this.state.submitted === true &&\n                    <Row>\n                        {\n                    getUserFeedback(this.getAnswer(this.state.qnum), this.state.ans, this.getFeedback(this.state.qnum), this.state.idx)\n                    }\n                    </Row>\n                }\n                {/* Bottom row -- submit and continue buttons*/}\n                <Row>\n                    <Col sm={3}></Col>\n                    <Col>\n                        {this.state.showSubmit && // if user has not already submitted, show submit\n                            <Button\n                            id=\"quiz-submit-btn\"\n                            variant=\"outline-primary\"\n                            size=\"lg\"\n                            onClick={()=> {\n                                this.handleSubmit()\n                                }}\n                            >\n                            {\" \"}\n                            Submit{\" \"}\n                            </Button>\n                        }\n                        {!this.state.showSubmit && // if user has submitted show continue option\n                        <Button\n                            id=\"quiz-submit-btn\"\n                            variant=\"outline-primary\"\n                            size=\"lg\"\n                            onClick={()=> {\n                                this.handleContinue(this.state.ans)\n                                }}\n                            >\n                            {\" \"}\n                            Continue{\" \"}\n                        </Button>\n                        }\n                    </Col>\n                    <Col sm={3}></Col>\n                </Row>\n                \n            </Container>\n        )\n        } else if (window.info){ // user has reached end of quiz\n            let lessonID = this.getLessonID();\n            return <Result curr = {this.state.numCorrect} total = {window.info.length} lessonID = {lessonID}> </Result>\n        } else {\n            return (<h1>Loading ... </h1>)\n        }\n    }\n\n    // Fetches the question details for the current topic\n    getQuestion (qnum) {\n        return window.info[qnum][\"question\"];\n    }\n    // Fetches the title name for the current topic\n    getCategory () {\n        return window.title;\n    }\n\n    // Fetches the question options list for the current question that is selected\n    getOptions (qnum) {\n        return window.info[qnum][\"options\"];\n    }\n\n    // Fetches the correct answer for the current question that is selected\n    getAnswer(qnum) {\n        let index = window.info[qnum][\"correctAnswer\"];\n        return window.info[qnum][\"options\"][index];\n    }\n\n\n    // Fetches the feedback list for the current question that is selected\n    getFeedback(qnum) {\n        return window.info[qnum][\"responses\"];\n    }\n\n\n    // Function that returns a string for the \n    // corresponding lessonID to the quiz page \n    // that we are currently on.\n    getLessonID() {\n        return window.lessonId;\n    }\n}\n\n// wrap export in withRouter so it can access React url params\nexport default withRouter(QuizPage);\n\n\n","import React from 'react';\nimport {Col, Image} from 'react-bootstrap';\n\nexport class LessonCol extends React.Component {\n  render() {\n\t\t// conditionally render different columns based on json contents\n\t\tconst data = this.props.content;\n\t\tlet cont;\n\t\tif (data.type === \"img\") {\n\t\t\tcont = <Image src={data.src} alt={data.alt} fluid/>\n\t\t} else if (data.type === \"p\") { \n\t\t\tcont = <p>{data.text}</p>\n\t\t} else if (data.type === \"h2\") {\n\t\t\tcont = <h2>{data.text}</h2>\n\t\t}else {\n\t\t\tcont = <p>Malformed Column Content</p>\n\t\t}\n\t\treturn(  \n\t\t\t<Col xs={data.xs}>{cont}</Col>\n\t\t);\n   }\n}\n\nexport default LessonCol;","import React from 'react';\nimport {Row} from 'react-bootstrap';\nimport LessonCol from './LessonCol';\n\nexport class LessonRow extends React.Component {\n\trender() {\n\t\t// Render a row and create a column for each, forward the params\n\t\treturn(  \n\t\t\t<Row>{\n\t\t\t\t\tthis.props.cols.map((k,i) => {\n\t\t\t\t\t\t\treturn <LessonCol key={i} content={k}/>\n\t\t\t\t\t})\n\t\t\t}</Row>\n\t\t);\n\t}\n}\n\nexport default LessonRow;","import React from 'react';\nimport { motion } from \"framer-motion\";\n\nconst VizSelectionRect = (props) => {\n\n\treturn (\n\t\t<div style={{textAlign:'center'}}>\n\t\t\t{props.isIndex && (\n\t\t\t\t<motion.div layoutId='indexArrow' id='indexArrow'>\n\t\t\t\t\t<p style={{textAlign:'center'}}>idx</p>\n\t\t\t\t\t<i className='fa fa-chevron-down'/>\n\t\t\t\t</motion.div>\n\t\t\t)}\n\t\t\t{props.isMin && (\n\t\t\t\t<motion.i layoutId='minArrow' id='minArrow'>\n\t\t\t\t\t<p style={{textAlign:'center'}}>min</p>\n\t\t\t\t\t<i className='fa fa-chevron-down'/>\n\t\t\t\t</motion.i> \n\t\t\t)}\n\t\t\t<motion.div className='rec' layout style={{\n\t\t\t\theight:`${props.data.v + 1}rem`, \n\t\t\t\tbackgroundColor:`hsl(${props.data.c}, 100%, 50%)`\n\t\t\t}}>\n\t\t\t\t<p>{props.data.v}</p>\n\t\t\t</motion.div>\n\t\t</div>\n\t);\n}\n\nexport default VizSelectionRect;","import React from 'react';\n\n\nconst VizCodeLine = ({isSelected = false, children}) => {\n\treturn (\n\t\t\t<li>\n\t\t\t\t{isSelected && <i className='fa-li fa fa-chevron-right'/>}\n\t\t\t\t<p>{children}</p>\n\t\t\t</li>\n\t);\n}\n\nexport default VizCodeLine;","import React from 'react';\nimport VizCodeLine from './VizCodeLine';\n\nconst VizSelectionSortCode = (props) => {\n\tconst line = props.step % 3;\n\tconsole.log(line);\n\n\treturn (\n\t\t<ul id='vizCode' className='fa-ul'>\n\t\t\t<VizCodeLine isSelected={line === 2}>{'move the index of the unsorted subarray'} </VizCodeLine>\n\t\t\t<VizCodeLine isSelected={line === 0}>{'find the minimum element in unsorted array'}</VizCodeLine>\n\t\t\t<VizCodeLine isSelected={line === 1}>{'swap the found minimum element with the first element'}</VizCodeLine>\n\t\t</ul>\n\t);\n\n\n}\n\nexport default VizSelectionSortCode;","import React from 'react';\nimport { AnimateSharedLayout } from \"framer-motion\";\nimport Rect  from './VizSelectionRect';\nimport VizSelectionSortCode from './VizSelectionSortCode';\n\nexport class VizSelectionSort extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrent: [\n\t\t\t\t{v:3}, {v:2}, {v:5}, {v:1}, {v:4}, {v:6}, {v:9}, {v:8}, {v:7}\n\t\t\t],\n\t\t\ti: 0,\n\t\t\tj: 0,\n\t\t\tmin: 0,\n\t\t\tstep: 0,\n\t\t\tintervalID: null\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\t// Choose random colors for each bar, use H 0-360 in hsv format\n\t\tconst current = [...this.state.current];\n\t\tfor (let i = 0; i < current.length; i++) {\n\t\t\tcurrent[i].c = Math.floor(Math.random()*361);\n\t\t}\n\t\tthis.setState({current});\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// if a timer is running cancel it\n\t\tthis.cancelTimer();\n\t}\n\n\t// On reset, update state with default values and shuffle the array\n\treset = () => {\n\t\tconsole.log('pressed reset');\n\t\tthis.cancelTimer();\n\t\tthis.setState({\n\t\t\tcurrent: this.shuffle([...this.state.current]),\n\t\t\ti: 0,\n\t\t\tj: 0,\n\t\t\tstep: 0,\n\t\t\tmin: 0\n\t\t})\n\t}\n\n\t// On play state the timer for animation \n\tplay = () =>  {\n\t\tconsole.log('pressed play');\n\t\t// Don't set a new timer if one already exists\n\t\tif (this.state.intervalID !== null) return;\n\t\t// TODO: check if should call step once first\n\t\tlet intervalID = setInterval(this.timer, 500);\n\t\tthis.setState({intervalID});\n\t}\n\n\t// \n\tpause = () => {\n\t\tconsole.log('pressed pause');\n\t\tthis.cancelTimer();\n\t}\n\n\t/** Moves the state up 1 step in the algorithm\n\t * \tReturns true if algorithm has completed\n\t*/\n\tstep = () => {\n\t\tconsole.log('pressed step');\n\t\t// do not allow step to be pressed if animation playing\n\t\tif (this.state.intervalID === null) this.advanceAlgo();\n\t}\n\n\tadvanceAlgo = () => {\n\t\t// grab state (never mutate state directly)\n\t\tlet i = this.state.i;\n\t\tlet j = this.state.j;\n\t\tlet min = this.state.min;\n\t\tlet arr = [...this.state.current];\n\t\t\n\t\t// Do not step further if done sorting\n\t\tif (i >= arr.length - 1) return true;\n\n\t\t// Break up the algorithm into steps so we can animate each independently\n\t\tswitch (this.state.step % 3) {\n\t\t\tcase 0:\n\t\t\t\t// Find the minimum element in unsorted array \n        min = i; \n        for (j = i + 1; j < arr.length; j++) {\n        \tif (arr[j].v < arr[min].v) {\n            min = j; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t// Swap the found minimum element with the first element \n\t\t\t\tlet first = arr[i];\n\t\t\t\tarr[i] = arr[min];\n\t\t\t\tarr[min] = first;\n\t\t\t\t// change min so the arrow moves with the element\n\t\t\t\tmin = i;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t// increment i\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('Something in step function broke.');\n\t\t}\n\t\t// update the state\n\t\tthis.setState({\n\t\t\ti,\n\t\t\tj,\n\t\t\tmin,\n\t\t\tstep: this.state.step + 1,\n\t\t\tcurrent: arr\n\t\t})\n\t\treturn false;\n\t}\n\n\tshuffle = (array) => {\n\t\tlet currentIndex = array.length, temporaryValue, randomIndex;\n\t\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex -= 1;\n\t\n\t\t\t// And swap it with the current element.\n\t\t\ttemporaryValue = array[currentIndex];\n\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\tarray[randomIndex] = temporaryValue;\n\t\t}\n\t\treturn array;\n\t}\n\n\t// timer callback, cancels timer when animation finishes\n\ttimer = () => {\n\t\tif (this.advanceAlgo()) {\n\t\t\tthis.cancelTimer();\n\t\t}\n\t} \n\n\t// clears the timer and resets state\n\tcancelTimer = () => {\n\t\tif (this.state.intervalID === null) return;\n\t\tclearInterval(this.state.intervalID);\n\t\tthis.setState({intervalID: null});\n\t\tconsole.log('timer canceled');\n\t}\n\n\trender() {\n\t\tconst st = this.state;\n\t\treturn(\n\t\t\t<div id='vizSelectSortEngine'>\n\t\t\t\t<div style={{width:'60%' }}>{\n\t\t\t\t\t<AnimateSharedLayout>\n\t\t\t\t\t\t<div className='array' >\n\t\t\t\t\t\t\t{this.state.current.map(elem => (\n\t\t\t\t\t\t\t\t<Rect \n\t\t\t\t\t\t\t\t\tkey={elem.v} \n\t\t\t\t\t\t\t\t\tdata={elem} \n\t\t\t\t\t\t\t\t\tisIndex={st.current[st.i] === elem}\n\t\t\t\t\t\t\t\t\tisMin={st.current[st.min] === elem}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</AnimateSharedLayout>\n\t\t\t\t}</div>\n\t\t\t\t<div style={{width:'40%'}}><VizSelectionSortCode step={this.state.step}/></div>\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default VizSelectionSort;\n","export function DijkstraAnimations(vertices, edges, start, end) {\n    let d = new Map()\n    // inititalizing each node distance to each node to 0\n    for (let v of vertices.keys()) {\n        d.set(v, Number.POSITIVE_INFINITY)\n    }\n    d.set(start, 0)\n    let getInitialInfo = getInititalDistance(d, vertices)\n\n\n    let explored_nodes = new Set()\n    explored_nodes.add(start)\n\n    let queue = []\n    for (let v of vertices.keys()) {\n        queue.push([v, d.get(v)])\n    }\n    queue.sort(function (a, b) { return a[1] - b[1] })\n    let parent = new Map()\n\n    let nodes_exploration_order = []\n    let main_exploration = []\n\n    while (queue.length > 0) {\n        //console.log(queue, queue.length, queue[0])\n        let node_u = queue.shift() // to remove the first element\n        let u = node_u[0]\n        nodes_exploration_order.push(u) // order in which he nodes are explored\n        explored_nodes.add(u) // the set of explored nodes\n\n\n        let edges_u = edges.get(u)\n        let neigbor_update = []\n        for (let e of edges_u) {\n            let v = e.to\n            let cost_e = parseInt(e.weight)\n            //console.log(v, cost_e, d.get(v))\n            if (!explored_nodes.has(v) && d.get(u) + cost_e < d.get(v)) {\n                d.set(v, d.get(u) + cost_e)\n                \n                let node_weight_update = {\n                    from: e.from, // the u node\n                    to: e.to, // the v node\n                    weightChangeNode: e.to, // node whose weight was changed\n                    weightChangeValue: d.get(u) + cost_e,\n                    edgeID: e.id,\n                    edgeIndex: e.edgeIndex,\n                    new_node_label: getUpdatedLabelWithWeight(v, d)\n                }\n                parent.set(v, {parent :u, edgeFromParent: node_weight_update})\n\n                neigbor_update.push(node_weight_update)\n            }\n        }\n        // Storing the node being explored right now\n        main_exploration.push({\n            node: u,\n            neigbor_update: neigbor_update\n        })\n\n        let new_queue = []\n        for (let node of queue) {\n            new_queue.push([node[0], d.get(node[0])])\n        }\n        queue = new_queue\n        queue.sort(function (a, b) { return a[1] - b[1] })\n        //console.log(queue)\n    }\n    return {\n        getInitialDistance: getInitialInfo,\n        distance: d,\n        nodes_exploration_order: nodes_exploration_order,\n        main_exploration: main_exploration,\n        parent: parent\n    };\n    // Get the first animation\n}\n\n\n// to get the initial weight\nfunction getInititalDistance(distance, vertices) {\n    let info = []\n   \n    for (let v of vertices.keys()) {\n        let nodeLabel = \"\"\n        let m = {}\n        if (v === '1') {\n            nodeLabel = 'S(' + distance.get(v) + ')'\n            m = {\n                label: (\n                    <>\n                        <h3> {nodeLabel} </h3>\n                    </>\n                )\n            }\n        } else {\n            nodeLabel = String.fromCharCode((\"A\".charCodeAt(0) + parseInt(v) - 2))\n            m = {\n                label: (\n                    <>\n                        <h3> {nodeLabel}(&infin;) </h3>\n                    </>\n                )\n            }\n        }\n        \n        info.push(m)\n        \n    }\n    return info\n}\n\n\n// to update the label of a node whose distance has just been updated\nfunction getUpdatedLabelWithWeight(v, distance) {\n    let nodeLabel = \"\"\n    let new_label_with_weight = ''\n    if (v === '1') {\n        nodeLabel = 'S(' + distance.get(v) + ')'\n        new_label_with_weight = (\n            <>\n                <h3> {nodeLabel} </h3>\n            </>\n        );\n\n    } else {\n        nodeLabel = String.fromCharCode((\"A\".charCodeAt(0) + parseInt(v) - 2)) + '(' + distance.get(v) + ')'\n\n        new_label_with_weight = (\n            <>\n                <h3> {nodeLabel} </h3>\n            </>\n        );\n    }\n    return new_label_with_weight\n}\n","import React from 'react';\n\n\nconst VizDijkstraCodeLine = ({isSelected = false, children}) => {\n\treturn (\n\t\t\t<li>\n\t\t\t\t{isSelected && <i className='fa-li fa fa-chevron-right'/>}\n\t\t\t\t<p>{children}</p>\n\t\t\t</li>\n\t);\n}\n\nexport default VizDijkstraCodeLine;","import React from 'react';\nimport VizDijkstraCodeLine from './VizDijkstraCodeLine';\n\nconst VizDisjktraCode = (props) => {\n\tconst line = props.step;\n\n\treturn (\n\t\t<ul id='vizDijkstraCode' className='fa-ul'>\n\t\t\t<VizDijkstraCodeLine isSelected={line === 0}>{'Initialize source node distance to 0 and all other node distances to INIFINITY'} </VizDijkstraCodeLine>\n\t\t\t<VizDijkstraCodeLine isSelected={line === 1}>{'Get the Node with LEAST DISTANCE that has not been explored'}</VizDijkstraCodeLine>\n\t\t\t<VizDijkstraCodeLine isSelected={line === 2}>{'Update the distances of neighbors of ACTIVE NODE if possible'}</VizDijkstraCodeLine>\n\t\t</ul>\n\t);\n}\n\nexport default VizDisjktraCode;","import React from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport CustomGraph from \"./CustomGraph\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { DijkstraAnimations } from \"./Algorithms/DijkstraAlgorithms\";\nimport VizDisjktraCode from \"./VizDijsktraCode\"\n\nexport class VizDijsktra extends React.Component {\n    startingStepNumber = -1;\n    visualizationSpeed = 1000;\n    initialTimeCounter = 0;\n    initialNumberNodes = 10;\n\n    state = {\n        numberNodes: this.initialNumberNodes, // the number of nodes in the graph\n        graph: CustomGraph.slice(), // the graph to be displayed\n        speed: this.visualizationSpeed, // the speed of the visualizer\n        play_timer_counter: this.initialTimeCounter, // to keep track of the counter of play button\n        step: this.startingStepNumber, // start step with -1\n        lastExecutedStep: -1, // to keep track of the last executed step. Helps in the reset() functionality\n        codeStep : -1\n    };\n\n\n    startNode = CustomGraph.slice()[0].id;\n    endNode = CustomGraph.slice()[9].id;\n\n    vertices = this.getVertices();\n    edges = this.getEdges();\n    animations_info = DijkstraAnimations(this.vertices, this.edges, this.startNode, this.endNode);\n\n    resetPressed = false;\n    pausePressed = false;\n\n    listOfTimeouts = [] // to store the different timeouts\n\n\n    // this animates that is being explored. The node whose neigbors will be explored\n    animateOneExploredNodes(index, time_counter) {\n        var timeoutID = setTimeout(() => {\n            if (this.resetPressed) {\n                return;\n            }\n\n            //this.pauseProgram() // to pause the program\n\n            let copyGraph = [...this.state.graph];\n            let item = { ...copyGraph[index] };\n            let style = { ...item.style };\n            style.background = \"red\"; // setting the color of node being explored to red\n            item.style = style;\n\n            copyGraph[index] = item;\n            this.setState({ graph: copyGraph, codeStep : 1 });\n        }, this.state.speed * time_counter);\n        this.listOfTimeouts.push(timeoutID)\n    }\n\n    // to animate when initial the wights of nodes are updated\n    getInitialDistanceAnimation() {\n        if (this.resetPressed) {\n            return;\n        }\n\n        let copyGraph = [...this.state.graph];\n        let getInitialDistance = this.animations_info.getInitialDistance;\n        for (let i = 0; i < getInitialDistance.length; i++) {\n            let item = { ...copyGraph[i] };\n            let data = { ...item.data };\n            data.label = getInitialDistance[i].label;\n            item.data = data;\n\n            // to change the color at weighht initialization\n            let style = { ...item.style };\n            style.background = \"yellow\"\n            item.style = style\n            //data.label= getInitialDistance.label\n            copyGraph[i] = item;\n        }\n        this.setState({ graph: copyGraph, codeStep : 0 });\n    }\n\n    // to get animation for a single neigbor. animate the edge to the neigbor\n    // and animate the neighbor node itself\n    getNeigborAnimation(nodeIndex, weightChangedTo, edgeID, edgeIndex, new_node_label, time_counter) {\n        var timeoutID = setTimeout(() => {\n            if (this.resetPressed) {\n                return;\n            }\n\n            //this.pauseProgram() // to pause the program\n\n            let copyGraph = [...this.state.graph];\n\n            // to animate the edge to the neigbhor\n            let edgeitem = { ...copyGraph[edgeIndex] };\n\n            let edgeanimated = { ...edgeitem.animated };\n            edgeanimated = true;\n\n            edgeitem.animated = edgeanimated;\n            copyGraph[edgeIndex] = edgeitem;\n\n            // to change the edge weight\n            let edgestyle = { ...edgeitem.style };\n            edgestyle.strokeWidth = \"10\";\n            edgeitem.style = edgestyle;\n            copyGraph[edgeIndex] = edgeitem;\n\n\n\n            // to animate the node whose weight is being explored\n            let nodeitem = { ...copyGraph[nodeIndex] };\n            let nodestyle = { ...nodeitem.style };\n            nodestyle.background = \"green\"; // nodeWeightUpdateColor\n            nodeitem.style = nodestyle;\n\n            // to change the node label\n            let nodedata = { ...nodeitem.data };\n            nodedata.label = new_node_label;\n            nodeitem.data = nodedata;\n\n            // to copy the these changes into the graph\n            copyGraph[nodeIndex] = nodeitem;\n\n            // updating the graph\n            this.setState({ graph: copyGraph, codeStep : 2 });\n        }, this.state.speed * time_counter);\n\n        this.listOfTimeouts.push(timeoutID)\n    }\n\n    // to remove the neigbor animation\n    removeNeighborAnimation(nodeIndex, edgeIndex, time_counter, step) {\n        var timeoutID = setTimeout(() => {\n            if (this.resetPressed) {\n                return;\n            }\n\n            //this.pauseProgram() // to pause the program\n\n            let copyGraph = [...this.state.graph];\n\n            // to revert the edge animation back to normal\n            let edgeitem = { ...copyGraph[edgeIndex] };\n            let edgeanimated = { ...edgeitem.animated };\n            edgeanimated = false;\n            edgeitem.animated = edgeanimated;\n            copyGraph[edgeIndex] = edgeitem;\n\n            // to rever the edge style back to normal\n            let edgestyle = { ...edgeitem.style };\n            edgestyle.strokeWidth = \"2\"; // to change the edge back to normal\n            edgeitem.style = edgestyle;\n            copyGraph[edgeIndex] = edgeitem;\n\n            // to rever the node color back tpo the initial color\n            let nodeitem = { ...copyGraph[nodeIndex] };\n            let nodestyle = { ...nodeitem.style };\n            nodestyle.background = \"gray\"; // nodeWeightUpdateColor\n            nodeitem.style = nodestyle;\n\n            // to copy the these changes into the graph\n            copyGraph[nodeIndex] = nodeitem;\n\n            // updating the graph\n            this.setState({ graph: copyGraph });\n\n            //this.state.lastExecutedStep = step\n            this.setState({ lastExecutedStep: step })\n\n        }, this.state.speed * time_counter);\n\n        this.listOfTimeouts.push(timeoutID)\n    }\n\n\n    getEdgeFromParentAnimation(edgeIndex, time_counter) {\n        //console.log(\"In edge\" + \" \" + this.state.speed * time_counter + \" \" + thislist of intervals)\n        var timeoutID = setTimeout(() => {\n            \n            if (this.resetPressed) {\n                return;\n            }\n            \n            \n\n            //this.pauseProgram() // to pause the program\n\n            let copyGraph = [...this.state.graph];\n\n            // to animate the edge between parent and child\n            let edgeitem = { ...copyGraph[edgeIndex] };\n            let edgeanimated = { ...edgeitem.animated };\n            edgeanimated = true;\n            edgeitem.animated = edgeanimated;\n            copyGraph[edgeIndex] = edgeitem;\n\n            // to change the stroke of edge between parent and child\n            let edgestyle = { ...edgeitem.style };\n            edgestyle.strokeWidth = \"10\"; // to change the edge back to normal\n            edgeitem.style = edgestyle;\n            copyGraph[edgeIndex] = edgeitem;\n\n            edgestyle.stroke = \"#FF57E7\"; // to change the edge back to normal\n            edgeitem.style = edgestyle;\n            copyGraph[edgeIndex] = edgeitem;\n\n            // updating the graph\n            this.setState({ graph: copyGraph, codeStep : 1 });\n        }, this.state.speed * time_counter);\n\n        // to add timeoutId\n        this.listOfTimeouts.push(timeoutID)\n    }\n\n\n    // the step is passed to help the program run through that line of code\n    getNodeExplorationAndWeightUpdateAnimation(step, time_counter) {\n        if (this.state.resetPressed) {\n            return;\n        }\n        \n        let main_exploration = this.animations_info.main_exploration;\n\n        let info = main_exploration[step]\n\n\n\n        //this.pauseProgram() // to pause the program\n\n\n        let node_explored = info.node;\n        let neighbors_update = info.neigbor_update;\n        let node_index = parseInt(node_explored) - 1;\n\n        let parent_node_info = this.animations_info.parent.get(node_explored)\n        if (typeof (parent_node_info) != 'undefined') {\n            let edgeIndex = parent_node_info.edgeFromParent.edgeIndex;\n\n   \n            this.getEdgeFromParentAnimation(edgeIndex, time_counter)\n            \n            // to move the time counter ahead\n            time_counter += 1;\n\n            // TODO : should do this inside the set timeout for every method\n            //this.state.play_timer_counter = time_counter\n            this.setState({ play_timer_counter: time_counter })\n        }\n\n\n        this.animateOneExploredNodes(node_index, time_counter);\n\n\n        time_counter += 1;\n\n        // TODO : should do this inside the set timeout for every method\n        //this.state.play_timer_counter = time_counter\n        this.setState({ play_timer_counter: time_counter })\n\n\n        for (let info2 of neighbors_update) {\n\n            //this.pauseProgram() // to pause the program\n\n            let neighbor_node = info2.weightChangeNode;\n            let neighbor_weight = info2.weightChangeValue;\n            let edgeID = info2.edgeID;\n            let edgeIndex = info2.edgeIndex;\n            let new_node_label = info2.new_node_label;\n            this.getNeigborAnimation(neighbor_node - 1, neighbor_weight, edgeID, edgeIndex, new_node_label, time_counter); // in the method also pass this.state.time_counter\n            time_counter++\n\n            this.removeNeighborAnimation(neighbor_node - 1, edgeIndex, time_counter, step); // in the method also pass this.state.time_counter\n            time_counter++\n\n            // TODO :  should do this inside the set timeout for every method\n            //this.state.play_timer_counter = time_counter // to make synchronous with play\n            this.setState({ play_timer_counter: time_counter })\n        }\n    }\n\n    play = () => {\n        this.resetPressed = false; // this means that the reset button is not being pressed again\n        this.pausePressed = false; // this means that the pause button is not being pressed again\n\n\n        if (this.state.step === -1) {\n            this.simulatestep(0) // to do the initial step of initializing node weights\n        }\n\n        //this.state.play_timer_counter = 0 // whenever play button is pressed set this.state.play_timer_counter = 0 so that it doesn't take more time than usual\n        this.setState({ play_timer_counter: 0 })\n\n        // to do the animations where distances of nodes are being updated\n        for (let i = this.state.step; i < this.animations_info.main_exploration.length; i++) {\n            let timeoutID = setTimeout(() => {\n                this.simulatestep(this.state.play_timer_counter)\n            }, 1000)\n            this.listOfTimeouts.push(timeoutID)\n\n        }\n    }\n\n    // This is to reset the the visualizer\n    reset = () => {\n        this.pausePressed = false;\n\n        this.resetPressed = true; // this is because resetButton was pressed\n\n        import(\"./CustomGraph\").then((module) => {\n\n            // remeber it is important to clear the intervals that were not used\n            for (let intervals of this.listOfTimeouts) {\n                clearTimeout(intervals)\n            }\n            this.listOfTimeouts = [] // since no more timeouts the list should be fine\n\n\n\n\n            this.setState({\n                numberNodes: this.initialNumberNodes,\n                graph: module.default.slice(),\n                speed: this.visualizationSpeed,\n                time_counter: this.initialTimeCounter,\n                step: this.startingStepNumber,\n                play_timer_counter: 0,\n                codeStep : -1\n            });\n        });\n    }\n\n    // we need the time counter to tell the step() method at which time should we do the animation \n    simulatestep(time_counter) {\n        this.resetPressed = false; // The pressing of step button means that the reset isn't pressed hence we set the value of resetPressed = false\n\n        //this.state.play_timer_counter = 0 // so that it doesn't take more time in the next step\n        this.setState({ play_timer_counter: time_counter })\n\n        this.pausePressed = false;\n\n        if (this.state.step === -1) {\n            this.getInitialDistanceAnimation(); // to do animation for initial distance\n            //this.state.step++;\n            this.setState({step: this.state.step + 1})\n        } else if (this.state.step < this.animations_info.main_exploration.length) {\n            \n            \n            this.getNodeExplorationAndWeightUpdateAnimation(this.state.step, time_counter);\n            //this.state.step++;\n            this.setState({ step: this.state.step + 1 })\n            return;\n        } else {\n            //this.reset()\n            //this.state.step =-1\n            this.setState({ step: -1 })\n            return;\n        }\n        //this.setState({step: this.state.step + 1})\n\n    }\n    step = () => {\n        this.simulatestep(0)\n    }\n\n    // to pause the animation\n    pause() {\n\n        this.pausePressed = true;\n        // remeber it is important to clear the intervals that were not used\n        for (let intervals of this.listOfTimeouts) {\n            clearTimeout(intervals)\n        }\n        \n        //this.state.step = this.state.lastExecutedStep + 1\n        this.setState({ step: this.state.lastExecutedStep + 1 })\n        this.listOfTimeouts = [] \n        // since no more timeouts the list should be fine\n        // to make the code run in an endless loop\n    }\n    // to pause the animation\n    resume() {\n        this.pausePressed = false;\n    }\n\n    getVertices() {\n        let vertices = new Map();\n        for (let i = 0; i < this.state.numberNodes; i++) {\n            let nodeID = this.state.graph[i].id;\n            vertices.set(nodeID, NodeObject(nodeID));\n        }\n        return vertices;\n    }\n\n    getEdges() {\n        let edges = new Map();\n        for (let i = this.state.numberNodes; i < this.state.graph.length; i++) {\n            let e = this.state.graph[i];\n            let fromNode = e.source;\n            let startNode = e.target;\n            let weight = parseInt(e.label); // weights are integer\n            let edgeID = e.id;\n            let edgeIndex = i;\n            if (!edges.has(fromNode)) {\n                edges.set(fromNode, []);\n            }\n            edges.get(fromNode).push(Edges(fromNode, startNode, weight, edgeID, edgeIndex));\n        }\n        return edges;\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <div style={{ height: '70vh' }}>\n                            <ReactFlow elements={this.state.graph} />\n                        </div>\n                    </Col>\n                    <Col>\n                      <div style={{width:'40%'}}>\n                        <VizDisjktraCode step={this.state.codeStep}/>\n                      </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n// to represent a node object\nconst NodeObject = (id) => {\n    return {\n        id: id,\n        distance: Infinity,\n        isVisited: false,\n        previousVisitedNode: null,\n        pathTillNow: null,\n        isStart: false,\n        isEnd: false,\n    };\n};\n\nconst Edges = (from, to, weight, id, edgeIndex) => {\n    return {\n        from: from,\n        to: to,\n        weight: weight,\n        id: id,\n        edgeIndex: edgeIndex,\n    };\n};\nexport default VizDijsktra;","import React from 'react';\nimport VizCodeLine from './VizCodeLine';\n\nconst VizBinarySearchCode = (props) => {\n\tconst line = props.step;\n\n\treturn (\n\t\t<ul id='vizCode' className='fa-ul'>\n\t\t\t<li><h6>start = {props.start}</h6></li>\n\t\t\t<li><h6>end = {props.end}</h6></li>\n\t\t\t<li><h6>mid = {props.mid}</h6></li>\n\t\t\t<li><h6>target = {props.target}</h6></li>\n\t\t\t<VizCodeLine isSelected={line === 0}>{`Compare Mid ${props.mid} \\n and target: ${props.target}`}</VizCodeLine>\n\t\t\t<VizCodeLine isSelected={line === 1}>{'Filter Search Area'}</VizCodeLine>\n\t\t\t<VizCodeLine isSelected={line === 2}>{'Target found return'} </VizCodeLine>\n\t\t</ul>\n\t);\n}\n\nexport default VizBinarySearchCode;","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { Bar } from \"react-chartjs-2\";\nimport VizBinarySearchCode from \"./VizBinarySearchCode\";\n\nconst FILTERED_COLOR = \"rgba(0,0,0,0.4)\";\nconst TARGET_COLOR = \"rgba(255, 0, 0,0.4)\";\nconst POINTER_COLOR = \"rgba(113, 205, 205,0.4)\";\nconst BASE_COLOR = \"rgba(255, 218, 128)\";\n\n\nclass VizBinarySearch extends React.Component {\n  constructor(props) {\n    super(props);\n    let colors = [];\n    let copyColors = [];\n\n    // Initializing colors for bars\n    for (let i = 0; i <  this.props.barData.length; i++) {\n      // console.log(\"initial color: \", this.props.color);\n      colors.push(BASE_COLOR);\n      copyColors.push(BASE_COLOR);\n    }\n\n    let start = 0\n    let end = this.props.barData.length - 1;\n    let mid = Math.floor((start + end)/2);\n\n    // Setting up initialState for reset\n    const initialState = {\n      barData: {\n        labels: this.props.barData,\n        datasets: [\n          {\n            label: 'Values',\n            data: this.props.barData,\n            backgroundColor: copyColors,\n          }\n        ],\n        borderWidth: 100\n      }, \n      colorsArray: copyColors,\n      changeColors: true,\n      points: [this.props.barData[start], this.props.barData[mid], this.props.barData[end]],\n      indices: [start, mid, end],\n      markEnd : false,\n      step: 0\n    }\n    \n    // Initializing state\n    this.state = {\n      barData: {\n        labels: this.props.barData,\n        datasets: [\n          {\n            label: 'Values',\n            data: this.props.barData,\n            backgroundColor: colors,\n          }\n        ],\n        borderWidth: 100\n      }, \n      colorsArray: colors,\n      changeColors: true,\n      points: [this.props.barData[start], this.props.barData[mid], this.props.barData[end]],\n      indices: [start, mid, end],\n      markEnd : false,\n      step: 0,\n      initialState: initialState,\n    };\n\n    // Binding, pause, play and reset functions to component\n    this.play  = this.play.bind(this); // bind to the component\n    this.pause = this.pause.bind(this); // bind to the component\n    this.reset = this.reset.bind(this); // bind to the component\n    console.log(\"hi from ctor\")\n  }\n\n\n  // Animates the targets to the specified colors in the colors array\n  animateColors(targets) {\n    let colors = this.state.colorsArray;\n    let colorsArray = [];\n    for(let i =  0; i < colors.length; i++) {\n      colorsArray.push(colors[i]);\n    }\n\n    for (let i = 0; i < targets.length; i++) {\n      colors[targets[i]] = POINTER_COLOR;\n    }\n\n    let labels = this.state.barData.labels;\n    let data = this.state.barData.datasets[0].data;\n\n    // Re building old state\n    let start = this.state.indices[0];\n    let mid = this.state.indices[1];\n    let end = this.state.indices[2];\n\n    this.setState({\n        barData: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Values',\n              data: data,\n              backgroundColor: colors,\n            }\n          ],\n          borderWidth: 100\n      }, \n      colorsArray: colorsArray,\n      changeColors: false,\n      points: [this.props.barData[start], this.props.barData[mid], this.props.barData[end]],\n      indices: [start, mid, end],\n      step: 0\n    });\n  }\n\n  // Filters the data to color the elements according to whether they are \n  // Under consideration to be searched further in the algo\n  // Ie. any elements between newStart and newEnd -- considered\n  // else color the bars black\n  markFiltered(newStart, newEnd) {\n    // console.log(\"changing data\");\n\n    let data = this.state.barData.datasets[0].data;\n    let colors = [];\n    let labels = [];\n    \n    // Update colors according to isfiltered\n    for (let i = 0; i < data.length; i++) {\n      if (i <= newEnd && i >= newStart) {\n        colors.push(this.state.colorsArray[i]);\n      } else {\n        colors.push(FILTERED_COLOR);\n      }\n      labels.push(this.state.barData.labels[i]);\n    }\n    \n    // Rebuilding state\n    let start = newStart;\n    let end = newEnd;\n    let mid = Math.floor((start+end)/2);\n\n    this.setState({\n      barData: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Values',\n            data: data,\n            backgroundColor: colors,\n          }\n        ],\n        borderWidth: 100\n      },\n      colorsArray: colors,\n      changeColors: true,\n      points: [data[start], data[mid], data[end]],\n      indices: [start, mid, end],\n      step: 1\n    });\n\n  }\n\n  // Once the target element is found,\n  // Coloring the found target element to TARGET_COLOR\n  markEnd(idx) {\n    let length = this.props.barData.length;\n    let colors = [];\n    for(let i =  0; i < length; i++) {\n      colors.push(FILTERED_COLOR);\n    }\n    colors[idx] = TARGET_COLOR;\n\n    let labels = this.state.barData.labels;\n    let data = this.state.barData.datasets[0].data;\n\n    this.setState({\n        barData: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Values',\n              data: data,\n              backgroundColor: colors,\n            }\n          ],\n          borderWidth: 100\n      }, \n      colorsArray: colors,\n      changeColors: false,\n      markEnd: true,\n      step: 2\n    });\n  }\n\n  // Represents 1 step in the algorithm, steps to the next state\n  step() {\n    let arr = this.state.barData.datasets[0].data; // current dataset\n    let x = this.props.target; // Target \n    let changeColors = this.state.changeColors;\n    let start=this.state.indices[0], end=this.state.indices[2];    \n    // Find the mid index\n    let mid=Math.floor((start + end)/2);\n    console.log(\"mid is: \", mid);\n    console.log(\"start\", start);\n    console.log(\"end\", end);\n\n    console.log(\"Initial state: \", this.state.initialState);\n\n\n    if (changeColors) { // Need to color updated start, mid and end\n      this.animateColors([start, mid, end]);\n    } else { // step through code\n        // If element is present at mid, return True\n      if (arr[mid]===x) { // Target has been reached\n        this.markEnd([mid]);\n      }\n      // Else look in left or right half accordingly\n      // And filter accordingly \n      else if (arr[mid] < x) {\n            start = mid + 1;\n            this.markFiltered(start, end);\n      }\n      else {\n            end = mid - 1;\n            this.markFiltered(start, end);\n      }\n    }\n  }\n  // STARTS animating, ie. stepping through the binary search code\n  play() {\n      console.log(\"interval is null: \", this.interval == null);\n      if(!this.interval) { // If animation isn't already running\n        this.interval = setInterval(() => {\n          console.log(\"initialState \", this.state.initialState);\n          if (this.state.markEnd) {\n            this.pause();\n          } else {\n            this.step()\n          }\n        }, 1000);\n    }\n  }\n\n  // STOPS animating, ie. stepping through the binary search code\n  pause() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  // RESETS the visualizer to the initial state.\n  reset() {\n    if (this.interval) { // animation is running\n      this.pause();\n    }\n    let colors = [];\n    for (let i = 0; i <  this.props.barData.length; i++) {\n      // console.log(\"initial color: \", this.props.color);\n      colors.push(BASE_COLOR);\n    }\n\n    let start = 0\n    let end = this.props.barData.length - 1;\n    let mid = Math.floor((start + end)/2);\n    const initialState = {\n      barData: {\n        labels: this.props.barData,\n        datasets: [\n          {\n            label: 'Values',\n            data: this.props.barData,\n            backgroundColor: colors,\n          }\n        ],\n        borderWidth: 100\n      }, \n      colorsArray: colors,\n      changeColors: true,\n      points: [this.props.barData[start], this.props.barData[mid], this.props.barData[end]],\n      indices: [start, mid, end],\n      markEnd : false,\n      step: 0\n    }\n    this.setState(initialState);\n    // window.location.reload(false);\n  }\n\n  render() {\n    return (\n      <Container>\n        {/* <Row>\n            <h1> Testing:: </h1>\n            <VizBarGraph></VizBarGraph>\n        </Row> */}\n        <Row>\n          <Col xs = \"9\">\n          <Bar\n            data = {this.state.barData}\n            options = {{\n                xAxes: [{\n                    gridLines: { \n                        display:false\n                    }\n                }],\n                yAxes: [{\n                    gridLines: {\n                        display:false\n                }}],\n                legend: {\n                    display: true,\n                    labels: {\n                        color: 'rgb(255, 99, 132)'\n                    }\n                } \n            }}\n            ></Bar>\n          </Col>\n          <Col>\n            <VizBinarySearchCode \n            step={this.state.step} \n            start = {this.state.points[0]} \n            mid = {this.state.points[1]} \n            end = {this.state.points[2]} \n            target = {this.props.target}/>\n          </Col>\n        </Row>\n        <Row>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default VizBinarySearch;\n","import './viz.css';\nimport React from 'react';\nimport {Row, Col, Button} from 'react-bootstrap';\n// TODO: find way to import specific engines\nimport VizSelectionSort from './VizSelectionSort';\nimport VizDijsktra from './VizDijkstra';\nimport VizBinarySearch from './VizBinarySearch';\n\n\nconst userInput = [1,2,3,4,5,6,7,8,9];\nconst target = 4;\n\n/**\n * This component is the root for all Visualizers.\n * Contains the UI common to all versions.\n * Conditionally renders the viz engine based on the lesson id\n * Bad lesson Id's may break this component\n */\nexport class VizRoot extends React.Component {\n    constructor(props) {\n        super(props);\n        // create a ref to call playback on the viz engine\n        this.engineRef = React.createRef();\n        this.state = {\n            barData: userInput\n        }\n    }\n\n    render() {\n        // map each lesson id to its viz component\n        const engine = {\n            graph_dijkstra_lesson: <VizDijsktra ref={this.engineRef}/>,\n            sort_selection_lesson: <VizSelectionSort ref={this.engineRef}/>,\n            search_binary_lesson: <VizBinarySearch ref={this.engineRef} barData = {userInput} target = {target} />\n        }\n        return(\n            <>\n            {engine[this.props.id]}\n            <Row className='vizRow'>\n                <Col xs='12' className='text-center justify-content-centers'>\n                    <Button variant='primary' \n                        onClick={()=> this.engineRef.current.reset()} className='round'>\n                        <i className=\"fa fa-undo\" />\n                        </Button>\n                    <Button variant='primary' \n                        onClick={()=> this.engineRef.current.play()} className='round'>\n                        <i className=\"fa fa-play\" />\n                    </Button>\n                    <Button variant='primary' \n                        onClick={()=> this.engineRef.current.pause()} className='round'>\n                        <i className=\"fa fa-pause\" />\n                    </Button>\n                    <Button variant='primary' \n                        onClick={()=> this.engineRef.current.step()} className='round'>\n                        <i className=\"fa fa-step-forward\" />\n                    </Button>\n                </Col>\n            </Row>\n            </>\n        )\n    }\n}\n\nexport default VizRoot;\n","\nimport React from 'react';\nimport {withRouter, Link} from 'react-router-dom';\nimport {Row, Col, Container, Button} from 'react-bootstrap';\nimport APIHelper from '../helpers/APIHelper';\nimport LessonRow from './LessonRow';\nimport VizRoot from '../viz/VizRoot'\n\n\n\nexport class LessonPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lessonData: null,\n        }\n    }\n\n    /**\n     * React Lifecycle method. Only call fetch once. \n     * Fetches data based on React URL params\n    */\n    componentDidMount() {\n        // build the route based on React URL params\n        const url = `lesson/${this.props.match.params.lessonID}`\n        APIHelper(url)\n        .then(lessonData => {\n            console.log(lessonData)\n            this.setState({ lessonData })\n        })\n        .catch(err => {\n            console.log('Something went wrong in Lesson Fetch');\n            console.log(err);\n        })\n    }\n\n    render() {\n        let content;\n        const data = this.state.lessonData;\n        // conditionally render loading bar or content\n        if (this.state.lessonData == null) {\n            content = \n            <p>Loading...</p>;\n        } else {\n            content = \n            <Container fluid id='lessonContent'>\n                <Row><Col>\n                    <h1>{data.title}</h1>\n                    <p>{data.description}</p>\n                </Col></Row>\n                {data.rows.map((row, i) => {\n                    // create a row for each element in array and pass them params\n                    return <LessonRow key={i} cols={row.cols}/>\n                })}\n                <Row className='justify-content-md-center'><VizRoot id={data.lessonID}/></Row>\n                <Row className='my-2'><Col className='text-center'>\n                    <Link to={`/quiz/${data.quizID}`}><Button variant='primary'>Start Quiz</Button></Link>\n                </Col></Row>\n            </Container>;\n        }\n\n        return(\n            <Container fluid id='lesson'>\n                {content}\n            </Container>\n        )\n    }\n}\n\nexport default withRouter(LessonPage);","import React from 'react';\nimport {Col} from 'react-bootstrap';\n\n/**\n * This Class should only be used as a gutter \n * (bootstrap column) inside a bootstrap <Row> component\n */\n\nexport class Gutter extends React.Component {\n\trender() {\n\t\t\treturn(\n\t\t\t\t<Col xs='1' className='gutter'></Col>\n\t\t\t);\n\t}\n}\n\nexport default Gutter;","import './App.css';\nimport React from 'react';\nimport {\n\t// BrowserRouter as Router, using Hash Router for github pages\n\tHashRouter as Router,\n\tSwitch,\n\tRoute\n} from 'react-router-dom';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport Navbar from './components/NavBar';\nimport HomePage from './components/homePageComps/HomePage';\nimport QuizPage from './components/QuizPage';\nimport LessonPage from './components/lessonComps/LessonPage';\nimport Gutter from './components/Gutter';\n\n/**\n * Handles the routing for the frontend. For static sites such as \n * Github pages, use a HashRouter. In the future url could be prettified \n * using a BrowserRouter instead. \n * @returns JSX Router\n */\nfunction App() {\n\treturn (\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<Navbar/> \n\t\t\t<Container fluid >\n\t\t\t\t<Row><Gutter/>\n\t\t\t\t<Col xs='10' id='appBody'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t\t<HomePage/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path='/lesson/:lessonID'>\n\t\t\t\t\t\t\t<LessonPage/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path='/quiz/:quizID'>\n\t\t\t\t\t\t\t<QuizPage/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path='*'>\n\t\t\t\t\t\t\t<h2>404 Bad Route</h2>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Col>\n\t\t\t\t<Gutter/>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n// Global CSS styles\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n/**\n * This is the Root entry point of the app.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}